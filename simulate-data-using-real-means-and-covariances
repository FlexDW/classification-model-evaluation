# A script to simulate multivariate data for classification
# purposes which mimicks the actual covariances and means
# of the data of interest. Requires variables already loaded:
# X - matrix of original data to emulate 
# Y - the actual class labels as 0 or 1

# load MASS package for mvrnorm generation
require(MASS)

p <- ncol(X)
nC <- sum(Y == 0)
nT <- sum(Y == 1)

# Obtain average random variance values
X.C <- X[Y==0, ]
X.T <- X[Y==1, ]
SIG.C <- diag(diag(var(X.C)))
SIG.T <- diag(diag(var(X.T)))
mu.C <- colMeans(X.C)
mu.T <- colMeans(X.T)

cl <- makeCluster(2)
registerDoParallel(cl)
registerDoParallel(cores=4)
icount <- iter(1:1000)
falsecor <- foreach(i=icount, .packages='MASS') %dopar% {
  rCOR.C <- cor(mvrnorm(n=nC, mu=mu.C, Sigma=SIG.C))
  rCOR.T <- cor(mvrnorm(n=nT, mu=mu.T, Sigma=SIG.T))
  diag(rCOR.C) <- diag(rCOR.T) <- 0
  c(sum(abs(as.numeric(rCOR.C))), sum(abs(as.numeric(rCOR.T))))
}
stopCluster(cl)

falsecor <- do.call(rbind, falsecor)
falsecor <- colMeans(falsecor)
falsecor.C <- falsecor[1]
falsecor.T <- falsecor[2]

# remove false correlation 
corX.C <- cor(X.C)
corX.T <- cor(X.T)
totalcor.C <- sum(abs(as.numeric(corX.C)))
totalcor.T <- sum(abs(as.numeric(corX.T)))
newcor.C <- totalcor.C
newcor.T <- totalcor.T

lambda <- 0
while(newcor.C > totalcor.C - falsecor.C){
  lambda <- lambda + 0.1
  lamMat <- diag(lambda, 15)
  corX.C <- cor(rbind(X.C, lamMat))
  newcor.C <- sum(abs(as.numeric(corX.C)))
} 

lambda <- 0
while(newcor.T > totalcor.T - falsecor.T){
  lambda <- lambda + 0.1
  lamMat <- diag(lambda, 15)
  corX.T <- cor(rbind(X.T, lamMat))
  newcor.T <- sum(abs(as.numeric(corX.T)))
} 

# convert cor back to cov
sd.C <- sqrt(diag(SIG.C))
sd.T <- sqrt(diag(SIG.T))
covX.C <- corX.C
covX.T <- corX.T
for(i in 1:15){
  for(j in 1:15){
    covX.C[i, j] <- corX.C[i, j] * sd.C[i] * sd.C[j]
    covX.T[i, j] <- corX.T[i, j] * sd.T[i] * sd.T[j]
  }
}
